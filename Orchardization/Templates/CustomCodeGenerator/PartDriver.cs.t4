<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ parameter type="System.String" name="PartName" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Boolean" name="SiteSetting" #>
<#@ parameter type="System.String" name="SiteSection" #>
<#@ parameter type="System.Boolean" name="HasSiteGroup" #>
using System;
using Orchard.ContentManagement;
using Orchard.ContentManagement.Drivers;
using <#= Module #>.Models;

// This code was generated by Orchardizer
namespace <#= Module #>.Drivers
{
    public class <#= PartName #>Driver : ContentPartDriver<<#= PartName #>>
    {
        protected override string Prefix
        {
            get { return "<#= PartName #>"; }
        }

<# if(!SiteSetting) { #>
        protected override DriverResult Display(<#= PartName #> part, string displayType, dynamic shapeHelper)
        {
            // Put all your driver logic inside this method so that if your part is not being displayed no logic is run. Yay efficiency
            return ContentShape("Parts_<#= PartName #>", 
                () => { 
                    return shapeHelper.Parts_<#= PartName #>(Model: part);
                });
        }
<# } #>

        protected override DriverResult Editor(<#= PartName #> part, dynamic shapeHelper)
        {
            return ContentShape("Parts_<#= PartName #>_Edit",
                () => shapeHelper.EditorTemplate(
                    TemplateName: "Parts/<#= PartName #>",
                    Model: part,
<# if(SiteSetting && HasSiteGroup) { #>
                    Prefix: Prefix))
                    .OnGroup("<#= SiteSection #>");
<# } else { #>
                    Prefix: Prefix));
<# } #>
        }

        protected override DriverResult Editor(<#= PartName #> part, IUpdateModel updater, dynamic shapeHelper)
        {
            updater.TryUpdateModel(part, Prefix, null, null);
            return Editor(part, shapeHelper);
        }
    }
}