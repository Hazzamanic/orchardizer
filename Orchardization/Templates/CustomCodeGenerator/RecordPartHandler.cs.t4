<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cs" #>
<#@ parameter type="System.String" name="PartName" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Boolean" name="SiteSetting" #>
<#@ parameter type="System.String" name="SiteSection" #>
<#@ parameter type="System.Boolean" name="HasSiteGroup" #>
<#@ parameter type="System.String" name="Feature" #>
<#@ parameter type="System.Boolean" name="HasFeature" #>
using Orchard.ContentManagement.Handlers;
using Orchard.Data;
using Orchard.ContentManagement;
using Orchard.Localization;
using <#= Module #>.Models;
<# if(HasFeature) { #>
using Orchard.Environment.Extensions;
<# } #>

// This code was generated by Orchardizer
namespace <#= Module #>.Handlers
{
<# if(HasFeature) { #>
	[OrchardFeature("<#= Feature #>")]
<# } #>
	public class <#= PartName #>Handler : ContentHandler
    {
        public <#= PartName #>Handler(IRepository<<#= PartName #>Record> repository) {
<# if(SiteSetting) { #>
			Filters.Add(new ActivatingFilter<<#= PartName #>>("Site"));	
<# } #>
            Filters.Add(StorageFilter.For(repository));

			T = NullLocalizer.Instance;
        }

		public Localizer T { get; set; }

<# if(SiteSetting && HasSiteGroup) { #>
		protected override void GetItemMetadata(GetContentItemMetadataContext context) {
            if (context.ContentItem.ContentType != "Site")
                return;
            base.GetItemMetadata(context);
            context.Metadata.EditorGroupInfo.Add(new GroupInfo(T("<#= SiteSection #>")));
        }
<# } #>
    }
}