<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System" #>
<#@ parameter name="Module" type="System.String" #>
<#@ parameter name="PartName" type="System.String" #>
<#@ parameter name="Settings" type="System.Collections.Generic.Dictionary<System.String,System.String>" #>
using System.Collections.Generic;
using System.Globalization;
using Orchard.ContentManagement;
using Orchard.ContentManagement.MetaData;
using Orchard.ContentManagement.MetaData.Builders;
using Orchard.ContentManagement.MetaData.Models;
using Orchard.ContentManagement.ViewModels;

// This code was generated by Orchardizer
namespace <#= Module #>.Settings
{
    public class <#= PartName #>EditorEvents : ContentDefinitionEditorEventsBase
    {
        public override IEnumerable<TemplateViewModel> TypePartEditor(ContentTypePartDefinition definition)
        {
            if (definition.PartDefinition.Name == "<#= PartName #>")
            {
                var model = definition.Settings.GetModel<<#= PartName #>Settings>();
                yield return DefinitionTemplate(model);
            }
        }

        public override IEnumerable<TemplateViewModel> TypePartEditorUpdate(ContentTypePartDefinitionBuilder builder, IUpdateModel updateModel) {
            if (builder.Name != "<#= PartName #>")
                yield break;

            var settings = new <#= PartName #>Settings {};

            if (updateModel.TryUpdateModel(settings, "<#= PartName #>Settings", null, null)) {
<# foreach(var setting in Settings) { #>
				builder.WithSetting("<#= PartName #>Settings.<#= setting.Key #>", settings.<#= setting.Key #><# if(setting.Value == "string") #>.ToString(CultureInfo.InvariantCulture)<# } #>);
<# } #>
			}

            yield return DefinitionTemplate(settings);
        }
    }
}