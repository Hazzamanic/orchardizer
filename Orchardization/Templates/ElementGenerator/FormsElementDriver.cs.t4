<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ parameter type="System.String" name="ElementName" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Collections.Generic.Dictionary<System.String,System.String>" name="Properties" #>
<#@ parameter type="System.Int32" name="PropCount" #>
<#@ parameter type="System.String" name="Category" #>
<#@ parameter type="System.String" name="Description" #>
<#@ parameter type="System.String" name="Feature" #>
<#@ parameter type="System.Boolean" name="HasFeature" #>
<#@ parameter type="System.Boolean" name="HasEditor" #>
using Orchard.Localization;
using Orchard.Forms.Services;
using Orchard.Layouts.Framework.Drivers;
using System.Collections.Generic;
using <#= Module #>.Elements;
<# if(HasFeature) { #>
using Orchard.Environment.Extensions;
<# } #>

// This code was generated by Orchardizer

namespace <#= Module #>.Elements {
<# if(HasFeature) { #>
    [OrchardFeature("<#= Feature #>")]
<# } #>
    public class <#= ElementName #>ElementDriver : FormsElementDriver<subscriptionsection> {
        public <#= ElementName #>ElementDriver(IFormManager formManager) : base(formManager) {
        }

        protected override IEnumerable<string> FormNames {
            get {
                yield return "<#= ElementName #>";
            }
        }

		protected override void OnDisplaying(<#= ElementName #> element, ElementDisplayContext context) {
            // do some stuff and modify the ElementDisplayContext so you can access this stuff in your view
        }

        protected override void DescribeForm(DescribeContext context) {
            context.Form("<#= ElementName #>", factory => {
                var shape = (dynamic)factory;
                var form = shape.Fieldset(
                    Id: "SubscriptionSection",
<#  foreach(var property in Properties) { 
string noSpaces = Regex.Replace(property.Key, @"\s+", "")
int i = 1;
#>
                    _<#= noSpaces #>: shape.Textbox(
                        Id: "<#= noSpaces #>",
                        Name: "<#= noSpaces #>",
                        Title: "<#= property.Key #>",
<# if(property.Value.ToLower().Contains("string")) { #>
                        Classes: new[] { "text", "large" },
<# } #>
                        Description: T("The <#= property.Key #> for the <#= ElementName #>"))<# if(i != PropCount) { #>,<# } #>
<# 
i++;
} #>

                return form;
            });
        }
    }
}
}