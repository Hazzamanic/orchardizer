<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cshtml" #>
<#@ parameter type="System.String" name="ElementName" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Collections.Generic.Dictionary<System.String,System.String>" name="Properties" #>
@model dynamic
@using <#= Module #>.Elements
@using Orchard.Layouts.Helpers

@{
    // Code generated by Orchardizer
    // Access properties

<# foreach(var property in Properties) { #>
    var <#= Char.ToLowerInvariant(property.Key[0]) + property.Key.Substring(1) #> = Model.<#= property.Key #>;
<# } #>

    // Strongly typed
    var element = (<#= ElementName #>) Model.Element; // if you don't want this you can remove the @using statement at the top

    // Include jQuery
    Script.Require("jQuery").AtFoot();
    // Include custom script
    // Script.Include("myscript.js").AtFoot();

    // Include custom style
    // Style.Include("mycss.css");

    // Access current user
    var user = WorkContext.CurrentUser;
    var username = user == null ? "" : user.UserName;

    // Get the content id
    var contentId = Model.ContentPart.ContentItem.Id;
    // Get the current content item
    var contentItem = Model.ContentPart.ContentItem;
    
    // To access a text field "Topic" you have attached to this content part
    //dynamic content = contentItem; // cast to get access to dynamic properties

	// use the tag builder so we can add classes etc. before view is rendered
	var tagBuilder = TagBuilderExtensions.CreateElementTagBuilder(Model);
    tagBuilder.AddCssClass("<#= ElementName #>");
}

@tagBuilder.StartElement
I made a <#= ElementName #> element!
@tagBuilder.EndElement

@using (Script.Foot()) {
    <script type="text/javascript">

    </script>
}