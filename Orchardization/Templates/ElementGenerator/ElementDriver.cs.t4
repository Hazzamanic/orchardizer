<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#@ parameter type="System.String" name="ElementName" #>
<#@ parameter type="System.String" name="NamePlusElement" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Collections.Generic.Dictionary<System.String,System.String>" name="Properties" #>
<#@ parameter type="System.Int32" name="PropCount" #>
<#@ parameter type="System.String" name="Category" #>
<#@ parameter type="System.String" name="Description" #>
<#@ parameter type="System.String" name="Feature" #>
<#@ parameter type="System.Boolean" name="HasFeature" #>
<#@ parameter type="System.Boolean" name="HasEditor" #>
using Orchard.Localization;
using Orchard.Layouts.Framework.Drivers;
using System.Collections.Generic;
using <#= Module #>.Elements;
<# if(HasEditor) { #>
using <#= Module #>.ViewModels;
<# } #>
<# if(HasFeature) { #>
using Orchard.Environment.Extensions;
<# } #>

// This code was generated by Orchardizer
namespace <#= Module #>.Drivers {
<# if(HasFeature) { #>
    [OrchardFeature("<#= Feature #>")]
<# } #>
    public class <#= NamePlusElement #>Driver : ElementDriver<<#= ElementName #>> {
		protected override void OnDisplaying(<#= ElementName #> element, ElementDisplayContext context) {
            // do some stuff and modify the ElementDisplayContext so you can access this stuff in your view
        }

<# if(HasEditor) { #>
		protected override EditorResult OnBuildEditor(<#= ElementName #> element, ElementEditorContext context) {
            var viewModel = new <#= ElementName #>ViewModel {
<# 
int i = 1;
foreach(var property in Properties) {  #>
				<#= property.Key #> = element.<#= property.Key #><# if(i != PropCount) { #>,<# } #>

<# 
i++;
} #>
            };
            var editor = context.ShapeFactory.EditorTemplate(TemplateName: "Elements.<#= ElementName #>", Model: viewModel);

            if (context.Updater != null) {
                context.Updater.TryUpdateModel(viewModel, context.Prefix, null, null);
<# foreach(var property in Properties) {  #>
				element.<#= property.Key #> = viewModel.<#= property.Key #>;
<# } #>
            }
            
            return Editor(context, editor);
        }
<# } #>
    }
}
