<#@ template language="C#" hostspecific="true" #>
<#@ Output Extension="cs" #>
<#@ parameter type="System.String" name="ElementName" #>
<#@ parameter type="System.String" name="Module" #>
<#@ parameter type="System.Collections.Generic.Dictionary<System.String,System.String>" name="Properties" #>
<#@ parameter type="System.String" name="Category" #>
<#@ parameter type="System.String" name="Description" #>
<#@ parameter type="System.String" name="Feature" #>
<#@ parameter type="System.Boolean" name="HasFeature" #>
<#@ parameter type="System.Boolean" name="HasEditor" #>
using Orchard.Localization;
using Orchard.Layouts.Framework.Elements;
using Orchard.Layouts.Helpers;
<# if(HasFeature) { #>
using Orchard.Environment.Extensions;
<# } #>

// This code was generated by Orchardizer

namespace <#= Module #>.Elements {
<# if(HasFeature) { #>
    [OrchardFeature("<#= Feature #>")]
<# } #>
    public class <#= ElementName #> : Element {
		public override string Category {
            get { return "<#= Category #>"; }
        }

		public override LocalizedString Description {
            get { return T("<#= Description #>"); }
        }

		// Insert a font awesome icon's unicode value here
		// https://fortawesome.github.io/Font-Awesome/icons/
		public override string ToolboxIcon {
            get { return "\uf1c9"; }
        }

<#  foreach(var property in Properties) { #>
        public <#=  property.Value #> <#= property.Key #> { 
			get { return this.Retrieve(x => x.<#= property.Key #>); }
            set { this.Store(x => x.<#= property.Key #>, value); }
		}
<# } #>
    }
}
